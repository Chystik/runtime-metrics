// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// PgClient is an autogenerated mock type for the PgClient type
type PgClient struct {
	mock.Mock
}

// Connect provides a mock function with given fields: ctx
func (_m *PgClient) Connect(ctx context.Context) (*sqlx.DB, error) {
	ret := _m.Called(ctx)

	var r0 *sqlx.DB
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*sqlx.DB, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *sqlx.DB); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.DB)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Disconnect provides a mock function with given fields: ctx
func (_m *PgClient) Disconnect(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Migrate provides a mock function with given fields:
func (_m *PgClient) Migrate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ping provides a mock function with given fields: ctx
func (_m *PgClient) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PingHandler provides a mock function with given fields: w, r
func (_m *PgClient) PingHandler(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// NewPgClient creates a new instance of PgClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPgClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *PgClient {
	mock := &PgClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
