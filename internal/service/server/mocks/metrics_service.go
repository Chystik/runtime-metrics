// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import (
	models "github.com/Chystik/runtime-metrics/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MetricsService is an autogenerated mock type for the MetricsService type
type MetricsService struct {
	mock.Mock
}

// GetAllMetrics provides a mock function with given fields:
func (_m *MetricsService) GetAllMetrics() []models.Metric {
	ret := _m.Called()

	var r0 []models.Metric
	if rf, ok := ret.Get(0).(func() []models.Metric); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Metric)
		}
	}

	return r0
}

// GetMetric provides a mock function with given fields: name
func (_m *MetricsService) GetMetric(name string) (models.Metric, error) {
	ret := _m.Called(name)

	var r0 models.Metric
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Metric, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) models.Metric); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(models.Metric)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCounter provides a mock function with given fields: _a0
func (_m *MetricsService) UpdateCounter(_a0 models.Metric) {
	_m.Called(_a0)
}

// UpdateGauge provides a mock function with given fields: _a0
func (_m *MetricsService) UpdateGauge(_a0 models.Metric) {
	_m.Called(_a0)
}

// NewMetricsService creates a new instance of MetricsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetricsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetricsService {
	mock := &MetricsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
