// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Chystik/runtime-metrics/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// AgentAPIClient is an autogenerated mock type for the AgentAPIClient type
type AgentAPIClient struct {
	mock.Mock
}

type AgentAPIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *AgentAPIClient) EXPECT() *AgentAPIClient_Expecter {
	return &AgentAPIClient_Expecter{mock: &_m.Mock}
}

// ReportMetrics provides a mock function with given fields: metrics
func (_m *AgentAPIClient) ReportMetrics(metrics map[string]interface{}) error {
	ret := _m.Called(metrics)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) error); ok {
		r0 = rf(metrics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AgentAPIClient_ReportMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportMetrics'
type AgentAPIClient_ReportMetrics_Call struct {
	*mock.Call
}

// ReportMetrics is a helper method to define mock.On call
//   - metrics map[string]interface{}
func (_e *AgentAPIClient_Expecter) ReportMetrics(metrics interface{}) *AgentAPIClient_ReportMetrics_Call {
	return &AgentAPIClient_ReportMetrics_Call{Call: _e.mock.On("ReportMetrics", metrics)}
}

func (_c *AgentAPIClient_ReportMetrics_Call) Run(run func(metrics map[string]interface{})) *AgentAPIClient_ReportMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *AgentAPIClient_ReportMetrics_Call) Return(_a0 error) *AgentAPIClient_ReportMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AgentAPIClient_ReportMetrics_Call) RunAndReturn(run func(map[string]interface{}) error) *AgentAPIClient_ReportMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// ReportMetricsJSON provides a mock function with given fields: metrics
func (_m *AgentAPIClient) ReportMetricsJSON(metrics map[string]models.Metric) error {
	ret := _m.Called(metrics)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]models.Metric) error); ok {
		r0 = rf(metrics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AgentAPIClient_ReportMetricsJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportMetricsJSON'
type AgentAPIClient_ReportMetricsJSON_Call struct {
	*mock.Call
}

// ReportMetricsJSON is a helper method to define mock.On call
//   - metrics map[string]models.Metric
func (_e *AgentAPIClient_Expecter) ReportMetricsJSON(metrics interface{}) *AgentAPIClient_ReportMetricsJSON_Call {
	return &AgentAPIClient_ReportMetricsJSON_Call{Call: _e.mock.On("ReportMetricsJSON", metrics)}
}

func (_c *AgentAPIClient_ReportMetricsJSON_Call) Run(run func(metrics map[string]models.Metric)) *AgentAPIClient_ReportMetricsJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]models.Metric))
	})
	return _c
}

func (_c *AgentAPIClient_ReportMetricsJSON_Call) Return(_a0 error) *AgentAPIClient_ReportMetricsJSON_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AgentAPIClient_ReportMetricsJSON_Call) RunAndReturn(run func(map[string]models.Metric) error) *AgentAPIClient_ReportMetricsJSON_Call {
	_c.Call.Return(run)
	return _c
}

// ReportMetricsJSONBatch provides a mock function with given fields: ctx, metrics
func (_m *AgentAPIClient) ReportMetricsJSONBatch(ctx context.Context, metrics map[string]models.Metric) error {
	ret := _m.Called(ctx, metrics)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]models.Metric) error); ok {
		r0 = rf(ctx, metrics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AgentAPIClient_ReportMetricsJSONBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportMetricsJSONBatch'
type AgentAPIClient_ReportMetricsJSONBatch_Call struct {
	*mock.Call
}

// ReportMetricsJSONBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - metrics map[string]models.Metric
func (_e *AgentAPIClient_Expecter) ReportMetricsJSONBatch(ctx interface{}, metrics interface{}) *AgentAPIClient_ReportMetricsJSONBatch_Call {
	return &AgentAPIClient_ReportMetricsJSONBatch_Call{Call: _e.mock.On("ReportMetricsJSONBatch", ctx, metrics)}
}

func (_c *AgentAPIClient_ReportMetricsJSONBatch_Call) Run(run func(ctx context.Context, metrics map[string]models.Metric)) *AgentAPIClient_ReportMetricsJSONBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]models.Metric))
	})
	return _c
}

func (_c *AgentAPIClient_ReportMetricsJSONBatch_Call) Return(_a0 error) *AgentAPIClient_ReportMetricsJSONBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AgentAPIClient_ReportMetricsJSONBatch_Call) RunAndReturn(run func(context.Context, map[string]models.Metric) error) *AgentAPIClient_ReportMetricsJSONBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewAgentAPIClient creates a new instance of AgentAPIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAgentAPIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *AgentAPIClient {
	mock := &AgentAPIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
