// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// AppLogger is an autogenerated mock type for the AppLogger type
type AppLogger struct {
	mock.Mock
}

type AppLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *AppLogger) EXPECT() *AppLogger_Expecter {
	return &AppLogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: msg, fields
func (_m *AppLogger) Debug(msg string, fields ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, fields...)
	_m.Called(_ca...)
}

// AppLogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type AppLogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - msg string
//   - fields ...interface{}
func (_e *AppLogger_Expecter) Debug(msg interface{}, fields ...interface{}) *AppLogger_Debug_Call {
	return &AppLogger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *AppLogger_Debug_Call) Run(run func(msg string, fields ...interface{})) *AppLogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *AppLogger_Debug_Call) Return() *AppLogger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *AppLogger_Debug_Call) RunAndReturn(run func(string, ...interface{})) *AppLogger_Debug_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields: msg, fields
func (_m *AppLogger) Error(msg string, fields ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, fields...)
	_m.Called(_ca...)
}

// AppLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type AppLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - msg string
//   - fields ...interface{}
func (_e *AppLogger_Expecter) Error(msg interface{}, fields ...interface{}) *AppLogger_Error_Call {
	return &AppLogger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *AppLogger_Error_Call) Run(run func(msg string, fields ...interface{})) *AppLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *AppLogger_Error_Call) Return() *AppLogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *AppLogger_Error_Call) RunAndReturn(run func(string, ...interface{})) *AppLogger_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Fatal provides a mock function with given fields: msg, fields
func (_m *AppLogger) Fatal(msg string, fields ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, fields...)
	_m.Called(_ca...)
}

// AppLogger_Fatal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatal'
type AppLogger_Fatal_Call struct {
	*mock.Call
}

// Fatal is a helper method to define mock.On call
//   - msg string
//   - fields ...interface{}
func (_e *AppLogger_Expecter) Fatal(msg interface{}, fields ...interface{}) *AppLogger_Fatal_Call {
	return &AppLogger_Fatal_Call{Call: _e.mock.On("Fatal",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *AppLogger_Fatal_Call) Run(run func(msg string, fields ...interface{})) *AppLogger_Fatal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *AppLogger_Fatal_Call) Return() *AppLogger_Fatal_Call {
	_c.Call.Return()
	return _c
}

func (_c *AppLogger_Fatal_Call) RunAndReturn(run func(string, ...interface{})) *AppLogger_Fatal_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: msg, fields
func (_m *AppLogger) Info(msg string, fields ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, fields...)
	_m.Called(_ca...)
}

// AppLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type AppLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - msg string
//   - fields ...interface{}
func (_e *AppLogger_Expecter) Info(msg interface{}, fields ...interface{}) *AppLogger_Info_Call {
	return &AppLogger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *AppLogger_Info_Call) Run(run func(msg string, fields ...interface{})) *AppLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *AppLogger_Info_Call) Return() *AppLogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *AppLogger_Info_Call) RunAndReturn(run func(string, ...interface{})) *AppLogger_Info_Call {
	_c.Call.Return(run)
	return _c
}

// NewAppLogger creates a new instance of AppLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAppLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppLogger {
	mock := &AppLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
