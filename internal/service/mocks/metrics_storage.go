// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MetricsStorage is an autogenerated mock type for the MetricsStorage type
type MetricsStorage struct {
	mock.Mock
}

type MetricsStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MetricsStorage) EXPECT() *MetricsStorage_Expecter {
	return &MetricsStorage_Expecter{mock: &_m.Mock}
}

// CloseFile provides a mock function with given fields:
func (_m *MetricsStorage) CloseFile() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetricsStorage_CloseFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseFile'
type MetricsStorage_CloseFile_Call struct {
	*mock.Call
}

// CloseFile is a helper method to define mock.On call
func (_e *MetricsStorage_Expecter) CloseFile() *MetricsStorage_CloseFile_Call {
	return &MetricsStorage_CloseFile_Call{Call: _e.mock.On("CloseFile")}
}

func (_c *MetricsStorage_CloseFile_Call) Run(run func()) *MetricsStorage_CloseFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetricsStorage_CloseFile_Call) Return(_a0 error) *MetricsStorage_CloseFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricsStorage_CloseFile_Call) RunAndReturn(run func() error) *MetricsStorage_CloseFile_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields:
func (_m *MetricsStorage) Read() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetricsStorage_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MetricsStorage_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
func (_e *MetricsStorage_Expecter) Read() *MetricsStorage_Read_Call {
	return &MetricsStorage_Read_Call{Call: _e.mock.On("Read")}
}

func (_c *MetricsStorage_Read_Call) Run(run func()) *MetricsStorage_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetricsStorage_Read_Call) Return(_a0 error) *MetricsStorage_Read_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricsStorage_Read_Call) RunAndReturn(run func() error) *MetricsStorage_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields:
func (_m *MetricsStorage) Write() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetricsStorage_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MetricsStorage_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
func (_e *MetricsStorage_Expecter) Write() *MetricsStorage_Write_Call {
	return &MetricsStorage_Write_Call{Call: _e.mock.On("Write")}
}

func (_c *MetricsStorage_Write_Call) Run(run func()) *MetricsStorage_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetricsStorage_Write_Call) Return(_a0 error) *MetricsStorage_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricsStorage_Write_Call) RunAndReturn(run func() error) *MetricsStorage_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewMetricsStorage creates a new instance of MetricsStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetricsStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetricsStorage {
	mock := &MetricsStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
