// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ConnectionRetrier is an autogenerated mock type for the ConnectionRetrier type
type ConnectionRetrier struct {
	mock.Mock
}

type ConnectionRetrier_Expecter struct {
	mock *mock.Mock
}

func (_m *ConnectionRetrier) EXPECT() *ConnectionRetrier_Expecter {
	return &ConnectionRetrier_Expecter{mock: &_m.Mock}
}

// DoWithRetry provides a mock function with given fields: retryableFunc
func (_m *ConnectionRetrier) DoWithRetry(retryableFunc func() error) error {
	ret := _m.Called(retryableFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(func() error) error); ok {
		r0 = rf(retryableFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConnectionRetrier_DoWithRetry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoWithRetry'
type ConnectionRetrier_DoWithRetry_Call struct {
	*mock.Call
}

// DoWithRetry is a helper method to define mock.On call
//   - retryableFunc func() error
func (_e *ConnectionRetrier_Expecter) DoWithRetry(retryableFunc interface{}) *ConnectionRetrier_DoWithRetry_Call {
	return &ConnectionRetrier_DoWithRetry_Call{Call: _e.mock.On("DoWithRetry", retryableFunc)}
}

func (_c *ConnectionRetrier_DoWithRetry_Call) Run(run func(retryableFunc func() error)) *ConnectionRetrier_DoWithRetry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func() error))
	})
	return _c
}

func (_c *ConnectionRetrier_DoWithRetry_Call) Return(_a0 error) *ConnectionRetrier_DoWithRetry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConnectionRetrier_DoWithRetry_Call) RunAndReturn(run func(func() error) error) *ConnectionRetrier_DoWithRetry_Call {
	_c.Call.Return(run)
	return _c
}

// NewConnectionRetrier creates a new instance of ConnectionRetrier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectionRetrier(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectionRetrier {
	mock := &ConnectionRetrier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
